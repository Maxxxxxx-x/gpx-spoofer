// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: records.sql

package sqlc

import (
	"context"
)

const getRecordById = `-- name: GetRecordById :one
SELECT id, userid, fileid, duration, distance, ascent, descent, elevationdiff, trails, rawdata FROM Records WHERE id = $1 LIMIT 1
`

func (q *Queries) GetRecordById(ctx context.Context, id string) (Record, error) {
	row := q.db.QueryRow(ctx, getRecordById, id)
	var i Record
	err := row.Scan(
		&i.ID,
		&i.Userid,
		&i.Fileid,
		&i.Duration,
		&i.Distance,
		&i.Ascent,
		&i.Descent,
		&i.Elevationdiff,
		&i.Trails,
		&i.Rawdata,
	)
	return i, err
}

const getRecords = `-- name: GetRecords :many
SELECT id, userid, fileid, duration, distance, ascent, descent, elevationdiff, trails, rawdata FROM Records LIMIT $1 OFFSET $2
`

type GetRecordsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetRecords(ctx context.Context, arg GetRecordsParams) ([]Record, error) {
	rows, err := q.db.Query(ctx, getRecords, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Record{}
	for rows.Next() {
		var i Record
		if err := rows.Scan(
			&i.ID,
			&i.Userid,
			&i.Fileid,
			&i.Duration,
			&i.Distance,
			&i.Ascent,
			&i.Descent,
			&i.Elevationdiff,
			&i.Trails,
			&i.Rawdata,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertSpoofedRecord = `-- name: InsertSpoofedRecord :exec
INSERT INTO spoofed_gpx (
    Id, Duration, Distance, HighestPoint, LowestPoint, ElevationDiff, Trails, RawData
)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
`

type InsertSpoofedRecordParams struct {
	ID            string   `json:"id"`
	Duration      *float64 `json:"duration"`
	Distance      *float64 `json:"distance"`
	Highestpoint  *float64 `json:"highestpoint"`
	Lowestpoint   *float64 `json:"lowestpoint"`
	Elevationdiff *float64 `json:"elevationdiff"`
	Trails        *string  `json:"trails"`
	Rawdata       *string  `json:"rawdata"`
}

func (q *Queries) InsertSpoofedRecord(ctx context.Context, arg InsertSpoofedRecordParams) error {
	_, err := q.db.Exec(ctx, insertSpoofedRecord,
		arg.ID,
		arg.Duration,
		arg.Distance,
		arg.Highestpoint,
		arg.Lowestpoint,
		arg.Elevationdiff,
		arg.Trails,
		arg.Rawdata,
	)
	return err
}
